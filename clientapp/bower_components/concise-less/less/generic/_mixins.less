//
// Passing in a single value will create font-sizing in
// pixels, rems as well as a proper line-height.
//
//  `.font-size(24px, false);`
//
//
// Big thanks to inuitcss for inspiration behind this
// (https://github.com/csswizardry/inuit.css/blob/master/generic/_mixins.scss)
.font-size(@font-size, @line-height: true) {
  @px-value: (@font-size);
  @rem-value: (@font-size / @base-font-size) * 1rem;
  @line-height-value: ceil(@font-size / @base-line-height) * (@base-line-height / @font-size);

  font-size: ~"@{px-value}";
  font-size: @rem-value;

  .line-height(@boolean) when (@boolean = true) {
    line-height: unit(@line-height-value);
  }

  .line-height(@line-height);
}


//
// Proper vendor prefixes are created just by
// passing a property value and size value.
//
//  `.vendor(border-radius, 4px);`
//
//
// Thanks to inuitcss for this handy mixin
// (https://github.com/csswizardry/inuit.css/blob/master/generic/_mixins.scss)
.vendor(@property, @value) {
  -webkit-@{property}: @value;
  -moz-@{property}: @value;
  -ms-@{property}: @value;
  -o-@{property}: @value;
  @{property}: @value;
}


//
// By passing in one of the pre-defined media queries that
// are packaged with Concise by default, you can easily
// create styles that are built from the ground-up to be
// mobile friendly.
//
//  `@media @medium { styles here }`
//
//
@extra-small:  ~"(min-width: @{extra-small-start})";
@small: 	   ~"(min-width: @{small-start})";
@medium: 	   ~"(min-width: @{medium-start})";
@large: 	   ~"(min-width: @{large-start})";
@extra-large:  ~"(min-width: @{extra-large-start})";
@high-density: ~"(-webkit-min-device-pixel-ratio: 1.5)",
         ~"(min--moz-device-pixel-ratio: 1.5)",
         ~"(-o-min-device-pixel-ratio: 3/2)",
         ~"(min-device-pixel-ratio: 1.5)";


//
// Create variable-number grid columns given the value
// for variable `@column-number`
//
.grid-setup(@number: @column-number) {
  // Assign percentage-based widths for columns
  .grid-setup(@n, @i: 1) when (@i =< @n) {
    .@{column-prefix}@{i} { width: (@i * 100% / @n); }

    // Subtract gutter amount from columns
    @gutter-column-width: (100% - @gutters * (@n - 1)) / @n;

    .gutters .@{column-prefix}@{i} {
      width: @gutter-column-width * @i + @gutters * (@i - 1);
      content: @gutters * (@i - 1);
    }

    .grid-setup(@n, (@i + 1));
  }

  .grid-setup(@column-number);
}


//
// Create proper `.push-` classes given the value
// for variable `@column-number`
//
.push-setup(@n, @i: 1) when (@i =< @n) {
  .push-@{i} { left: (@i * 100% / @n); }

  .gutters .push-@{i} { left: (@i * 100% / @n - @gutters); }

  .push-setup(@n, (@i + 1));
}


//
// Create proper `.pull-` classes given the value
// for variable `@column-number`
//
.pull-setup(@n, @i: 1) when (@i =< @n) {
  .pull-@{i} { right: (@i * 100% / @n); }

  .gutters .pull-@{i} { right: (@i * 100% / @n - @gutters); }

  .pull-setup(@n, (@i + 1));
}
